{"version":3,"sources":["../src/rpc/index.ts","../src/methods/sign-psbt.ts"],"names":["RpcErrorCode","SignatureHash"],"mappings":"AAmCO,IAAKA,OAEVA,IAAA,YAAc,QAAd,cACAA,IAAA,gBAAkB,QAAlB,kBACAA,IAAA,iBAAmB,QAAnB,mBACAA,IAAA,eAAiB,QAAjB,iBACAA,IAAA,eAAiB,QAAjB,iBACAA,IAAA,aAAe,OAAf,eAEAA,IAAA,eAAiB,MAAjB,iBACAA,IAAA,qBAAuB,MAAvB,uBAVUA,OAAA,ICzBL,IAAKC,OACVA,IAAA,IAAM,GAAN,MACAA,IAAA,KAAO,GAAP,OACAA,IAAA,OAAS,GAAT,SACAA,IAAA,iBAAmB,KAAnB,mBACAA,IAAA,kBAAoB,KAApB,oBACAA,IAAA,oBAAsB,KAAtB,sBANUA,OAAA","sourcesContent":["// See JSON RPC specification\n// https://www.jsonrpc.org/specification\n\nexport type RpcParameterByPosition = string[];\nexport type RpcParameterByName = Record<string, string>;\n\nexport type RpcParameter = RpcParameterByPosition | RpcParameterByName;\nexport interface RpcBaseProps {\n  jsonrpc: '2.0';\n  id: string;\n}\n\nexport interface RpcRequest<TMethod, TParam = RpcParameter> extends RpcBaseProps {\n  method: TMethod;\n  params?: TParam;\n}\n\nexport interface RpcError<TErrorData = RpcParameter> {\n  code: number | RpcErrorCode;\n  message: string;\n  data?: TErrorData;\n}\n\nexport interface RpcSuccessResponse<TResult extends object> extends RpcBaseProps {\n  result: TResult;\n}\n\nexport interface RpcErrorResponse<TError extends RpcError = RpcError> extends RpcBaseProps {\n  error: TError;\n}\n\nexport type RpcResponse<TResult extends object, TError extends RpcError = RpcError> =\n  | RpcSuccessResponse<TResult>\n  | RpcErrorResponse<TError>;\n\nexport enum RpcErrorCode {\n  // Spec defined server errors\n  PARSE_ERROR = -32700,\n  INVALID_REQUEST = -32600,\n  METHOD_NOT_FOUND = -32601,\n  INVALID_PARAMS = -32602,\n  INTERNAL_ERROR = -32603,\n  SERVER_ERROR = -32000,\n  // Client defined errors\n  USER_REJECTION = 4001,\n  METHOD_NOT_SUPPORTED = 4002,\n}\n\nexport type ExtractSuccessResponse<T> = Extract<T, RpcSuccessResponse<any>>;\n\nexport type ExtractErrorResponse<T> = Extract<T, RpcErrorResponse<any>>;\n\nexport type DefineRpcMethod<\n  TRequest extends RpcRequest<string, unknown>,\n  TResponse extends RpcResponse<object>\n> = Record<\n  TRequest['method'],\n  {\n    request: TRequest;\n    response: TResponse;\n  }\n>;\n","import { DefineRpcMethod, RpcRequest, RpcResponse } from '../rpc';\n\n/**\n * ALL           -- all inputs, all outputs\n * NONE          -- all inputs, no outputs\n * SINGLE        -- all inputs, one output of the same index\n * ALL + ANYONE  -- one input, all outputs\n * NONE + ANYONE -- one input, no outputs\n * SINGLE        -- one inputs, one output of the same index\n */\nexport enum SignatureHash {\n  ALL = 0x01,\n  NONE = 0x02,\n  SINGLE = 0x03,\n  ALL_ANYONECANPAY = 0x81,\n  NONE_ANYONECANPAY = 0x82,\n  SINGLE_ANYONECANPAY = 0x83,\n}\n\ntype SignatureHashLiteral = `${SignatureHash}`;\n\nexport interface SignPsbtRequestParams {\n  account?: number;\n  allowedSighash?: SignatureHash[] | SignatureHashLiteral[];\n  hex: string;\n  signAtIndex?: number | number[];\n}\n\nexport interface SignPsbtResponseBody {\n  txid: string;\n}\n\nexport type SignPsbtRequest = RpcRequest<'signPsbt', SignPsbtRequestParams>;\n\nexport type SignPsbtResponse = RpcResponse<SignPsbtResponseBody>;\n\nexport type DefineSignPsbtMethod = DefineRpcMethod<SignPsbtRequest, SignPsbtResponse>;\n"]}
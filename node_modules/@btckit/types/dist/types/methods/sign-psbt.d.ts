import { DefineRpcMethod, RpcRequest, RpcResponse } from '../rpc';
/**
 * ALL           -- all inputs, all outputs
 * NONE          -- all inputs, no outputs
 * SINGLE        -- all inputs, one output of the same index
 * ALL + ANYONE  -- one input, all outputs
 * NONE + ANYONE -- one input, no outputs
 * SINGLE        -- one inputs, one output of the same index
 */
export declare enum SignatureHash {
    ALL = 1,
    NONE = 2,
    SINGLE = 3,
    ALL_ANYONECANPAY = 129,
    NONE_ANYONECANPAY = 130,
    SINGLE_ANYONECANPAY = 131
}
type SignatureHashLiteral = `${SignatureHash}`;
export interface SignPsbtRequestParams {
    account?: number;
    allowedSighash?: SignatureHash[] | SignatureHashLiteral[];
    hex: string;
    signAtIndex?: number | number[];
}
export interface SignPsbtResponseBody {
    txid: string;
}
export type SignPsbtRequest = RpcRequest<'signPsbt', SignPsbtRequestParams>;
export type SignPsbtResponse = RpcResponse<SignPsbtResponseBody>;
export type DefineSignPsbtMethod = DefineRpcMethod<SignPsbtRequest, SignPsbtResponse>;
export {};

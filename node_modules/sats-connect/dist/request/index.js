"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
const provider_1 = require("../provider");
const request = async (method, params, providerId) => {
    let provider = window.XverseProviders?.BitcoinProvider || window.BitcoinProvider;
    if (providerId) {
        provider = await (0, provider_1.getProviderById)(providerId);
    }
    if (!provider) {
        throw new Error('no wallet provider was found');
    }
    if (!method) {
        throw new Error('A wallet method is required');
    }
    const response = await provider.request(method, params);
    if (isRpcSuccessResponse(response)) {
        return {
            status: 'success',
            result: response.result,
        };
    }
    return {
        status: 'error',
        error: response.error,
    };
};
exports.request = request;
const isRpcSuccessResponse = (response) => {
    return Object.hasOwn(response, 'result') && !!response.result;
};
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map
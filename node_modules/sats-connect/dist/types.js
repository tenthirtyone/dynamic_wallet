"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcErrorCode = exports.BitcoinNetworkType = void 0;
var BitcoinNetworkType;
(function (BitcoinNetworkType) {
    BitcoinNetworkType["Mainnet"] = "Mainnet";
    BitcoinNetworkType["Testnet"] = "Testnet";
})(BitcoinNetworkType = exports.BitcoinNetworkType || (exports.BitcoinNetworkType = {}));
/**
 * @enum {number} RpcErrorCode
 * @description JSON-RPC error codes
 * @see https://www.jsonrpc.org/specification#error_object
 */
var RpcErrorCode;
(function (RpcErrorCode) {
    /**
     * Parse error Invalid JSON
     **/
    RpcErrorCode[RpcErrorCode["PARSE_ERROR"] = -32700] = "PARSE_ERROR";
    /**
     * The JSON sent is not a valid Request object.
     **/
    RpcErrorCode[RpcErrorCode["INVALID_REQUEST"] = -32600] = "INVALID_REQUEST";
    /**
     * The method does not exist/is not available.
     **/
    RpcErrorCode[RpcErrorCode["METHOD_NOT_FOUND"] = -32601] = "METHOD_NOT_FOUND";
    /**
     * Invalid method parameter(s).
     */
    RpcErrorCode[RpcErrorCode["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
    /**
     * Internal JSON-RPC error.
     * This is a generic error, used when the server encounters an error in performing the request.
     **/
    RpcErrorCode[RpcErrorCode["INTERNAL_ERROR"] = -32603] = "INTERNAL_ERROR";
    /**
     * user rejected/canceled the request
     */
    RpcErrorCode[RpcErrorCode["USER_REJECTION"] = -32000] = "USER_REJECTION";
    /**
     * method is not supported for the address provided
     */
    RpcErrorCode[RpcErrorCode["METHOD_NOT_SUPPORTED"] = -32001] = "METHOD_NOT_SUPPORTED";
})(RpcErrorCode = exports.RpcErrorCode || (exports.RpcErrorCode = {}));
//# sourceMappingURL=types.js.map
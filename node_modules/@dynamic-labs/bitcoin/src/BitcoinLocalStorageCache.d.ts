import { WalletAdditionalAddress } from '@dynamic-labs/sdk-api-core';
import { BitcoinConnectedAccount } from './types';
type BitcoinConnectedAccounts = {
    [key: string]: BitcoinConnectedAccount;
};
type BitcoinActiveAccount = {
    address: string;
    additionalAddresses: WalletAdditionalAddress[];
};
export declare class BitcoinLocalStorageCache implements IBitcoinSessionCache {
    private readonly CONNECTED_ACCOUNTS_KEY;
    private readonly LAST_BALANCE_KEY;
    constructor(key: string);
    getActiveAccount(): Promise<BitcoinActiveAccount | undefined>;
    getConnectedAccounts(): Promise<BitcoinConnectedAccounts | undefined>;
    getConnectedAccount(address: string): Promise<BitcoinConnectedAccount | undefined>;
    setConnectedAccount(addess: string, account: BitcoinConnectedAccount): Promise<void>;
    clearConnectedAcccounts(): Promise<void>;
    getLastBalance(): Promise<string | undefined>;
    setLastBalance(balance: string): Promise<void>;
    clearLastBalance(): Promise<void>;
}
export interface IBitcoinSessionCache {
    clearConnectedAcccounts(): Promise<void>;
    getActiveAccount(): Promise<BitcoinActiveAccount | undefined>;
    getConnectedAccount(address: string): Promise<BitcoinConnectedAccount | undefined>;
    getConnectedAccounts(): Promise<BitcoinConnectedAccounts | undefined>;
    setConnectedAccount(addess: string, account: BitcoinConnectedAccount): Promise<void>;
    clearLastBalance(): Promise<void>;
    getLastBalance(): Promise<string | undefined>;
    setLastBalance(balance: string): Promise<void>;
}
export {};

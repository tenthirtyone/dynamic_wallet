'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var validateAddress = require('./validateAddress.cjs');
var validateSigHash = require('./validateSigHash.cjs');

/**
 * This method will validate the psbt against the signature data provided in the request
 * It checks 3 things:
 * - That the signing index exists in the input
 * - That the address provided in the request matches the address in the input,
 *   unless the disableAddressValidation flag is set
 * - That the sigHashType of the input is a member of the allowedSigHashTypes array
 */
const validatePsbt = (psbt, allowedSigHashTypes, signatureData) => {
    if (!(signatureData === null || signatureData === void 0 ? void 0 : signatureData.length))
        return;
    for (const input of signatureData) {
        const { address: signingAddress, signingIndexes, 
        // request from ME in cases of multi-sig. Steven wanted this defaulted to true
        disableAddressValidation = true, } = input;
        if (!(signingIndexes === null || signingIndexes === void 0 ? void 0 : signingIndexes.length))
            return;
        // address is a required input
        if (!signingAddress)
            throw new Error('validatePsbt - address not provided');
        for (const index of signingIndexes) {
            const selectedInput = psbt.data.inputs[index];
            if (!selectedInput)
                throw new Error('validatePsbt - requested input not found');
            if (!disableAddressValidation) {
                validateAddress.validateAddress(psbt, signingAddress, index, selectedInput);
            }
            validateSigHash.validateSigHash(allowedSigHashTypes, selectedInput);
        }
    }
};

exports.validatePsbt = validatePsbt;

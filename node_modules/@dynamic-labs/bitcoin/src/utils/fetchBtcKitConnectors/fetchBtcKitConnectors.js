'use client'
import { getProvidersFromWindow } from '@dynamic-labs/utils';
import { BitcoinBtcKitConnector } from '../../connectors/BitcoinBtcKitConnector/BitcoinBtcKitConnector.js';
import { BTCKIT_INTERFACE } from '../../const.js';

const fetchBtcKitConnectors = ({ walletBook, }) => {
    var _a;
    return Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        .map(([key, wallet]) => {
        var _a, _b;
        const injectedConfig = (_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.chain === 'btc' &&
            Boolean(config.providerInterface === BTCKIT_INTERFACE));
        if (!((_b = injectedConfig === null || injectedConfig === void 0 ? void 0 : injectedConfig.windowLocations) === null || _b === void 0 ? void 0 : _b.length))
            return undefined;
        const providers = getProvidersFromWindow(injectedConfig.windowLocations[0]);
        return class extends BitcoinBtcKitConnector {
            constructor(props) {
                super(Object.assign(Object.assign({}, props), { overrideKey: key, walletData: wallet }), providers === null || providers === void 0 ? void 0 : providers[0]);
                this.name = wallet.shortName || wallet.name;
            }
        };
    })
        .filter((connector) => Boolean(connector));
};

export { fetchBtcKitConnectors };

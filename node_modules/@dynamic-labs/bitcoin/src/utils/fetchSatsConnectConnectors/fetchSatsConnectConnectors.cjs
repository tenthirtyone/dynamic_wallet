'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _const = require('../../const.cjs');
require('../../../_virtual/_tslib.cjs');
require('sats-connect');
require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('@dynamic-labs/sdk-api-core');
require('@wallet-standard/app');
require('bitcoinjs-lib');
var BitcoinSatsConnectConnector = require('../../connectors/BitcoinSatsConnectConnector/BitcoinSatsConnectConnector.cjs');

const fetchSatsConnectConnectors = ({ walletBook, }) => {
    var _a;
    return Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        .filter(([_, wallet]) => {
        var _a;
        return (_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => {
            var _a;
            return config.chain === 'btc' &&
                Boolean((_a = config.walletStandard) === null || _a === void 0 ? void 0 : _a.features.includes(_const.SATSCONNECT_FEATURE));
        });
    })
        .map(([key, wallet]) => {
        const { shortName } = wallet;
        const name = shortName || wallet.name;
        return class extends BitcoinSatsConnectConnector.BitcoinSatsConnectConnector {
            constructor(props) {
                super(Object.assign(Object.assign({}, props), { overrideKey: key, walletData: wallet }));
                this.name = name;
            }
        };
    });
};

exports.fetchSatsConnectConnectors = fetchSatsConnectConnectors;

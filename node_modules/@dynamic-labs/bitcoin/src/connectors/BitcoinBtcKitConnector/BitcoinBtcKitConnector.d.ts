import type { BtcKitListenFn, BtcKitRequestFn } from '@btckit/types';
import { BitcoinNetworkType } from 'sats-connect';
import { BitcoinWalletConnector, BitcoinWalletConnectorOpts } from '../BitcoinWalletConnector';
import { BitcoinTransaction, BitcoinSignPsbtRequest, BitcoinSignPsbtResponse } from '../../types';
export type BtcKitProvider = {
    request: BtcKitRequestFn;
    listen: BtcKitListenFn;
};
export declare abstract class BitcoinBtcKitConnector extends BitcoinWalletConnector {
    currentNetwork: BitcoinNetworkType;
    private btcKit;
    constructor(opts: BitcoinWalletConnectorOpts, btcKit: BtcKitProvider);
    getAddress(): Promise<string | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    sendBitcoin(transaction: BitcoinTransaction): Promise<string | undefined>;
    convertNetworkTypeToNetworkMode(): "mainnet" | "testnet";
    signPsbt(request: BitcoinSignPsbtRequest): Promise<BitcoinSignPsbtResponse | undefined>;
}

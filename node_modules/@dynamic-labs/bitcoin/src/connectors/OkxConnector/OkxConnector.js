'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import { Psbt } from 'bitcoinjs-lib';
import { isMobile, template } from '@dynamic-labs/utils';
import { BitcoinWalletConnector } from '../BitcoinWalletConnector.js';
import { createPsbtOptions } from '../../utils/psbt/createSignPsbtOptions.js';

class OkxConnector extends BitcoinWalletConnector {
    constructor(opts) {
        super(Object.assign(Object.assign({}, opts), { overrideKey: 'okxwalletbtc' }));
        this.name = 'OKX Wallet';
        this.canFetchConnectedAccounts = false;
    }
    get walletBookWallet() {
        return this.walletBook.wallets[this.key];
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isInstalledOnBrowser() &&
                isMobile() &&
                this.walletBookWallet.mobile &&
                this.walletBookWallet.mobile.inAppBrowser) {
                const inAppBrowserCompiledTemplate = template(this.walletBookWallet.mobile.inAppBrowser);
                const deepLink = inAppBrowserCompiledTemplate({
                    encodedDappURI: encodeURIComponent(window.location.toString()),
                });
                window.location.assign(deepLink);
                return;
            }
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const { address, publicKey } = yield provider.connect();
            const bitcoinAddress = {
                address,
                publicKey,
            };
            yield this.setConnectedAccountWithAddresses({
                active: true,
                mainAddress: address,
                ordinalsAddress: bitcoinAddress,
            });
            return address;
        });
    }
    signMessage(messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            return provider.signMessage(messageToSign, 'bip322-simple');
        });
    }
    sendBitcoin(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            const connectedAddress = yield this.getAddress();
            if (!connectedAddress || !provider) {
                return;
            }
            return provider.sendBitcoin(transaction.recipientAddress, transaction.amount.toString());
        });
    }
    signPsbt(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getProvider();
            if (!provider) {
                return;
            }
            const psbtFromBase64 = Psbt.fromBase64(request.unsignedPsbtBase64);
            const signedPsbtHex = yield provider.signPsbt(psbtFromBase64.toHex(), createPsbtOptions(psbtFromBase64, request));
            return { signedPsbt: Psbt.fromHex(signedPsbtHex).toBase64() };
        });
    }
}

export { OkxConnector };

'use client'
import { getProvidersFromWindow } from '@dynamic-labs/utils';
import { BitcoinWalletStandardWalletsSingleton } from './bitcoinWalletStandardWallets.js';

class BitcoinProviderHelper {
    constructor(walletData) {
        this.walletData = walletData;
    }
    getInjectedConfig() {
        if (!this.walletData || !this.walletData.injectedConfig)
            return;
        const { injectedConfig } = this.walletData;
        return injectedConfig.find((c) => c.chain === 'btc');
    }
    getProvider() {
        var _a;
        const config = this.getInjectedConfig();
        if (!((_a = config === null || config === void 0 ? void 0 : config.windowLocations) === null || _a === void 0 ? void 0 : _a.length))
            return undefined;
        const foundProviders = getProvidersFromWindow(config.windowLocations[0]);
        if (foundProviders === null || foundProviders === void 0 ? void 0 : foundProviders.length)
            return foundProviders[0];
        return undefined;
    }
    hasAllRequiredFeatures(wallet) {
        const injectedConfig = this.getInjectedConfig();
        if (!(injectedConfig === null || injectedConfig === void 0 ? void 0 : injectedConfig.walletStandard) || !wallet) {
            return false;
        }
        const { walletStandard } = injectedConfig;
        for (const feature of walletStandard.features) {
            if (!(feature in wallet.features)) {
                return false;
            }
        }
        return true;
    }
    bitcoinWalletStandardLookup() {
        const wallets = BitcoinWalletStandardWalletsSingleton.getWallets();
        const walletStandardWallet = wallets === null || wallets === void 0 ? void 0 : wallets.find((wallet) => {
            var _a, _b;
            return ((_b = (_a = this.getInjectedConfig()) === null || _a === void 0 ? void 0 : _a.walletStandard) === null || _b === void 0 ? void 0 : _b.name) === wallet.name &&
                this.hasAllRequiredFeatures(wallet);
        });
        return walletStandardWallet;
    }
    findWallet() {
        return this.bitcoinWalletStandardLookup();
    }
    getWalletMethods(wallet) {
        var _a, _b, _c, _d;
        return {
            connect: (_a = wallet.features['bitcoin:connect']) === null || _a === void 0 ? void 0 : _a.connect,
            signAndSendTransaction: (_b = wallet.features['bitcoin:signAndSendTransaction']) === null || _b === void 0 ? void 0 : _b.signAndSendTransaction,
            signMessage: (_c = wallet.features['bitcoin:signMessage']) === null || _c === void 0 ? void 0 : _c.signMessage,
            signTransaction: (_d = wallet.features['bitcoin:signTransaction']) === null || _d === void 0 ? void 0 : _d.signTransaction,
        };
    }
}

export { BitcoinProviderHelper };

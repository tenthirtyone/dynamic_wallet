import { BitcoinProvider, InputToSign as SatsConnectInputToSign } from 'sats-connect';
import { SignPsbtResponse as BtcKitSignPsbtResponse } from '@btckit/types';
import { IdentifierString, WalletAccount } from '@wallet-standard/base';
import type { WalletAdditionalAddress } from '@dynamic-labs/sdk-api-core';
import { SATSCONNECT_FEATURE } from './const';
export type ErrorWithCode = Error & {
    code: string;
};
export type SatsConnectFeature = {
    [SATSCONNECT_FEATURE]: {
        provider: BitcoinProvider;
    };
};
export type BitcoinAddress = {
    address: string;
    publicKey?: string;
};
export type ConnectedAccountWithAddressesProps = {
    mainAddress?: string;
    ordinalsAddress?: BitcoinAddress;
    paymentAddress?: BitcoinAddress;
    active?: boolean;
};
export type BitcoinConnectedAccount = {
    additionalAddresses: WalletAdditionalAddress[];
    active?: boolean;
};
export type BitcoinTransaction = {
    amount: bigint;
    recipientAddress: string;
};
export type SignPsbtOptions = {
    autoFinalized: boolean;
    toSignInputs?: {
        index: number;
        address: string;
        sighashTypes?: number[];
        disableAddressValidation?: boolean;
    }[];
};
export type BitcoinSignPsbtRequest = {
    allowedSighash: number[];
    unsignedPsbtBase64: string;
    signature?: BitcoinSignPsbtRequestSignature[];
};
export type BitcoinSignPsbtRequestSignature = {
    address: string;
    signingIndexes: number[] | undefined;
    disableAddressValidation?: boolean;
};
export type SatsConnectSignTransactionInput = {
    message?: string;
    psbtBase64: string;
    inputsToSign: SatsConnectInputToSign[];
    broadcast?: boolean;
};
export type BtcKitSignPsbtResponseExtended = BtcKitSignPsbtResponse & {
    result: {
        hex: string;
    };
};
export type BitcoinSignPsbtResponse = {
    signedPsbt: string;
};
export type BitcoinAddressPurpose = 'ordinals' | 'payment';
export interface BitcoinConnectInput {
    purposes: BitcoinAddressPurpose[];
}
export interface BitcoinConnectOutput {
    /**
     * The accounts will have addresses that correspond with the `purposes` in the {@link BitcoinConnectInput}, and will
     * be returned in the same order.
     */
    accounts: WalletAccount[];
}
export type BitcoinConnectMethod = (input?: BitcoinConnectInput) => Promise<BitcoinConnectOutput>;
export type BitcoinSignMessageMethod = (...inputs: BitcoinSignMessageInput[]) => Promise<BitcoinSignMessageOutput[]>;
export interface BitcoinSignMessageInput {
    /** Account to use. */
    account: WalletAccount;
    /** Message to sign, as raw bytes. */
    message: Uint8Array;
}
export interface BitcoinSignMessageOutput {
    /**
     * Message bytes that were signed.
     * The wallet may prefix or otherwise modify the message before signing it.
     */
    signedMessage: Uint8Array;
    /** Message signature produced. */
    signature: Uint8Array;
}
export type BitcoinSignTransactionMethod = (...inputs: BitcoinSignTransactionInput[]) => Promise<BitcoinSignTransactionOutput[]>;
export interface BitcoinSignTransactionInput {
    /** Partially Signed Bitcoin Transaction (PSBT), as raw bytes. */
    psbt: Uint8Array;
    /** Transaction inputs to sign. */
    inputsToSign: InputToSign[];
    /** Chain to use. */
    chain?: IdentifierString;
}
export interface InputToSign {
    /** Account to use. */
    account: WalletAccount;
    /** List of input indexes that should be signed by the account. */
    signingIndexes: number[];
    /** A SIGHASH flag. */
    sigHash?: BitcoinSigHashFlag;
}
export interface BitcoinSignTransactionOutput {
    /** Signed Partially Signed Bitcoin Transaction (PSBT), as raw bytes. */
    signedPsbt: Uint8Array;
}
/** SIGHASH flag. */
export type BitcoinSigHashFlag = 'ALL' | 'NONE' | 'SINGLE' | 'ALL|ANYONECANPAY' | 'NONE|ANYONECANPAY' | 'SINGLE|ANYONECANPAY';
export type BitcoinSignAndSendTransactionMethod = (...inputs: BitcoinSignAndSendTransactionInput[]) => Promise<BitcoinSignAndSendTransactionOutput[]>;
export interface BitcoinSignAndSendTransactionInput extends BitcoinSignTransactionInput {
    chain: IdentifierString;
}
export interface BitcoinSignAndSendTransactionOutput {
    /** Transaction ID (transaction hash). */
    txId: string;
}
export type BitcoinWalletStandardMethods = {
    connect?: BitcoinConnectMethod;
    signMessage?: BitcoinSignMessageMethod;
    signTransaction?: BitcoinSignTransactionMethod;
    signAndSendTransaction?: BitcoinSignAndSendTransactionMethod;
};

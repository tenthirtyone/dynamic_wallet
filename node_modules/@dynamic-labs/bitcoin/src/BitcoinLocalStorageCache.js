'use client'
import { __awaiter } from '../_virtual/_tslib.js';
import { getItemAsync, setItemAsync, removeItemAsync } from '@dynamic-labs/utils';

class BitcoinLocalStorageCache {
    constructor(key) {
        this.CONNECTED_ACCOUNTS_KEY = `bitcoin_${key}_connectedAccounts`;
        this.LAST_BALANCE_KEY = `bitcoin_${key}_lastBalance`;
    }
    getActiveAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            const connectedAccounts = yield getItemAsync(this.CONNECTED_ACCOUNTS_KEY);
            if (!connectedAccounts) {
                return;
            }
            const activeAddress = Object.keys(connectedAccounts).find((key) => connectedAccounts[key].active);
            if (!activeAddress) {
                return;
            }
            return {
                additionalAddresses: connectedAccounts[activeAddress].additionalAddresses,
                address: activeAddress,
            };
        });
    }
    getConnectedAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            const connectedAccounts = yield getItemAsync(this.CONNECTED_ACCOUNTS_KEY);
            return connectedAccounts;
        });
    }
    getConnectedAccount(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const connectedAccounts = yield getItemAsync(this.CONNECTED_ACCOUNTS_KEY);
            return connectedAccounts === null || connectedAccounts === void 0 ? void 0 : connectedAccounts[address];
        });
    }
    setConnectedAccount(addess, account) {
        return __awaiter(this, void 0, void 0, function* () {
            let connectedAccounts = yield getItemAsync(this.CONNECTED_ACCOUNTS_KEY);
            if (!connectedAccounts) {
                connectedAccounts = {};
            }
            // if current account is active, reset all other accounts to inactive
            if (account.active) {
                Object.keys(connectedAccounts).forEach((key) => {
                    if (connectedAccounts) {
                        connectedAccounts[key].active = false;
                    }
                });
            }
            // add new account to map or override existing one
            connectedAccounts[addess] = account;
            return setItemAsync(this.CONNECTED_ACCOUNTS_KEY, connectedAccounts);
        });
    }
    clearConnectedAcccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return removeItemAsync(this.CONNECTED_ACCOUNTS_KEY);
        });
    }
    getLastBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            return getItemAsync(this.LAST_BALANCE_KEY);
        });
    }
    setLastBalance(balance) {
        return __awaiter(this, void 0, void 0, function* () {
            return setItemAsync(this.LAST_BALANCE_KEY, balance);
        });
    }
    clearLastBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            return removeItemAsync(this.LAST_BALANCE_KEY);
        });
    }
}

export { BitcoinLocalStorageCache };

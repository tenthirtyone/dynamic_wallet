import EventEmitter from 'eventemitter3';
import { LogLevel, Message } from './types';
export { LogLevel } from './types';
type InstrumentOptions = {
    args?: any[];
    transformMeta?: (meta: Record<string, any> | undefined) => Record<string, any> | undefined;
};
export declare class Logger {
    private name;
    private level;
    private static globalKeys;
    private meta;
    constructor(name: string | string[], level?: LogLevel);
    static setEmitErrors(emit?: boolean): void;
    static setEnvironmentId(environmentId?: string): void;
    static events: EventEmitter<{
        error: Message;
    }, any>;
    setMetaData(key: string, value: any): void;
    private getNameArray;
    createLogger(name: string | string[], level?: LogLevel): Logger;
    get logLevel(): string;
    setLogLevel(level: LogLevel | keyof typeof LogLevel): void;
    private formatMessage;
    private captureAndSend;
    /**
     * Emits data to our server for analysis and debugging
     */
    emitHttpLogs(level: LogLevel, message: Message, { args, transformMeta }: InstrumentOptions): void;
    log(level: LogLevel, message: Message, ...args: any[]): void;
    debug(message: Message, ...args: any[]): void;
    info(message: Message, ...args: any[]): void;
    warn(message: Message, ...args: any[]): void;
    error(message: Message, ...args: any[]): void;
}

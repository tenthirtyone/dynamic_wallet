'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var walletBook = require('@dynamic-labs/wallet-book');
require('@dynamic-labs/turnkey');
require('./solWalletConnector.cjs');
require('tweetnacl');
require('bs58');
require('@solana/web3.js');
var InjectedWalletBase = require('./injected/InjectedWalletBase.cjs');
require('./SolanaWalletStandardConnector/SolanaWalletStandardConnector.cjs');
var isSignedMessage = require('./utils/isSignedMessage.cjs');

class CoinbaseSolana extends InjectedWalletBase.InjectedWalletBase {
    constructor(opts) {
        super(opts);
        this.name = 'CoinbaseSolana';
        this.overrideKey = 'coinbasesolana';
        this.wallet = walletBook.findWalletBookWallet(this.walletBook, this.key);
    }
    getSigner() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a.connect();
        });
    }
    signMessage(messageToSign) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const walletAddress = yield this.getAddress();
            if (!walletAddress) {
                return undefined;
            }
            const provider = yield this.getSigner();
            if (!provider) {
                return undefined;
            }
            const encodedMessage = new TextEncoder().encode(messageToSign);
            const signedMessage = yield provider.signMessage(encodedMessage, walletAddress);
            if (!signedMessage) {
                return undefined;
            }
            return utils.bufferToBase64(isSignedMessage.isSignedMessage(signedMessage) ? signedMessage.signature : signedMessage);
        });
    }
}

exports.CoinbaseSolana = CoinbaseSolana;

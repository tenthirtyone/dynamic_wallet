'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var nacl = require('tweetnacl');
var bs58 = require('bs58');
var web3_js = require('@solana/web3.js');
var solWalletConnector = require('../solWalletConnector.cjs');
var utils = require('./utils.cjs');
var storage = require('./storage.cjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var nacl__default = /*#__PURE__*/_interopDefaultLegacy(nacl);
var bs58__default = /*#__PURE__*/_interopDefaultLegacy(bs58);

class PhantomRedirect extends solWalletConnector.SolWalletConnector {
    constructor(props) {
        super(Object.assign({}, props));
        this.name = 'Phantom';
        this.overrideKey = 'phantom';
    }
    getMethod() {
        throw new Error('Method not implemented.');
    }
    getAddress() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const address = storage.storage.address.get();
            if (address) {
                return address;
            }
            yield this.connect();
            return undefined;
        });
    }
    connect() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            // Generate a new key pair
            const keyPair = nacl__default["default"].box.keyPair();
            storage.storage.encryptionPublicKey.set(keyPair.publicKey);
            storage.storage.encryptionSecretKey.set(keyPair.secretKey);
            const isLocalHost = window.location.href.includes('localhost') ||
                window.location.href.includes('0.0.0.0') ||
                window.location.href.includes('127.0.0.1');
            const rpc = (_b = (_a = this.solNetworks[0].privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : this.solNetworks[0].rpcUrls[0];
            const params = new URLSearchParams({
                app_url: isLocalHost ? 'https://demo.dynamic.xyz' : window.location.href,
                cluster: yield utils.fetchCluster(rpc),
                dapp_encryption_public_key: bs58__default["default"].encode(keyPair.publicKey),
                redirect_link: window.location.href,
            });
            const url = utils.buildUrl('connect', params);
            window.location.href = url;
        });
    }
    getSession() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams(window.location.search);
            const { data, nonce, phantom_encryption_public_key: phantomEncryptionPublicKey, encryptionSecretKey, } = this.getInputsOrThrow('getSession', ['data', 'nonce', 'phantom_encryption_public_key'], ['encryptionSecretKey']);
            const sharedSecret = nacl__default["default"].box.before(bs58__default["default"].decode(phantomEncryptionPublicKey), encryptionSecretKey);
            storage.storage.sharedSecret.set(sharedSecret);
            const connectData = utils.decryptPayload(data, nonce, sharedSecret);
            storage.storage.session.set(connectData.session);
            storage.storage.address.set(new web3_js.PublicKey(connectData.public_key));
            params.delete('phantom_encryption_public_key');
            params.delete('data');
            params.delete('nonce');
            history.replaceState(null, '', `${window.location.origin}${window.location.pathname}?${params.toString()}`);
            return connectData.public_key;
        });
    }
    signMessage(messageToSign) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const { session, sharedSecret, encryptionPublicKey } = this.getInputsOrThrow('signMessage', [], ['session', 'sharedSecret', 'encryptionPublicKey']);
            storage.storage.message.set(messageToSign);
            const payload = {
                message: bs58__default["default"].encode(Buffer.from(messageToSign)),
                session,
            };
            const [nonce, encryptedPayload] = utils.encryptPayload(payload, sharedSecret);
            const params = new URLSearchParams({
                dapp_encryption_public_key: bs58__default["default"].encode(encryptionPublicKey),
                nonce: bs58__default["default"].encode(nonce),
                payload: bs58__default["default"].encode(encryptedPayload),
                redirect_link: window.location.href,
            });
            const url = utils.buildUrl('signMessage', params);
            storage.storage.method.set('signMessage');
            window.location.href = url;
            // throwing this to prevent local storage from being cleared.
            // when verifying signature, the SDK calls endSession when no
            // signature is returned. in the case of phantom mobile, a signature
            // is not returned from signMessage, so an error will always be thrown.
            // this is a workaround to prevent the SDK from clearing local storage
            // ideally we would figure out how to:
            //   1. kick off the sign message on one tab
            //   2. resume the process on that tab after the user signs in phantom
            throw new Error('ignore');
        });
    }
    extractSignature() {
        const params = new URLSearchParams(window.location.search);
        const { data, nonce, sharedSecret, message } = this.getInputsOrThrow('extractSignature', ['data', 'nonce'], ['sharedSecret', 'message']);
        const signMessageData = utils.decryptPayload(data, nonce, sharedSecret);
        params.delete('data');
        params.delete('nonce');
        history.replaceState(null, '', `${window.location.origin}${window.location.pathname}?${params.toString()}`);
        return {
            message,
            signature: signMessageData.signature,
        };
    }
    extractTransactions() {
        const params = new URLSearchParams(window.location.search);
        const { data, nonce, sharedSecret } = this.getInputsOrThrow('extractTransactions', ['data', 'nonce'], ['sharedSecret']);
        const signAllTransactionsData = utils.decryptPayload(data, nonce, sharedSecret);
        const decodedTransactions = signAllTransactionsData.transactions.map((t) => web3_js.Transaction.from(bs58__default["default"].decode(t)));
        params.delete('data');
        params.delete('nonce');
        history.replaceState(null, '', `${window.location.origin}${window.location.pathname}?${params.toString()}`);
        return decodedTransactions;
    }
    extractTransaction() {
        const params = new URLSearchParams(window.location.search);
        const { data, nonce, sharedSecret } = this.getInputsOrThrow('extractTransaction', ['data', 'nonce'], ['sharedSecret']);
        const signTransactionData = utils.decryptPayload(data, nonce, sharedSecret);
        const decodedTransaction = web3_js.Transaction.from(bs58__default["default"].decode(signTransactionData.transaction));
        params.delete('data');
        params.delete('nonce');
        history.replaceState(null, '', `${window.location.origin}${window.location.pathname}?${params.toString()}`);
        return decodedTransaction;
    }
    consumeMethod() {
        const method = storage.storage.method.get();
        storage.storage.method.remove();
        return method;
    }
    getSigner() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const address = storage.storage.address.get();
            if (!address) {
                return undefined;
            }
            return {
                addListener: () => {
                    throw new Error('Not implemented');
                },
                connect: () => {
                    throw new Error('Not implemented');
                },
                disconnect: () => {
                    throw new Error('Not implemented');
                },
                emit: () => {
                    throw new Error('Not implemented');
                },
                eventNames: () => {
                    throw new Error('Not implemented');
                },
                isBackpack: false,
                isBraveWallet: false,
                isConnected: true,
                isExodus: false,
                isGlow: false,
                isMagicEden: false,
                isPhantom: true,
                isSolflare: false,
                listenerCount: () => {
                    throw new Error('Not implemented');
                },
                listeners: () => {
                    throw new Error('Not implemented');
                },
                off: () => {
                    throw new Error('Not implemented');
                },
                on: () => {
                    throw new Error('Not implemented');
                },
                once: () => {
                    throw new Error('Not implemented');
                },
                providers: [],
                publicKey: new web3_js.PublicKey(address),
                removeAllListeners: () => {
                    throw new Error('Not implemented');
                },
                removeListener: () => {
                    throw new Error('Not implemented');
                },
                signAllTransactions: (transactions) => _tslib.__awaiter(this, void 0, void 0, function* () {
                    const serializedTransactions = transactions.map((t) => bs58__default["default"].encode(t.serialize({
                        requireAllSignatures: false,
                    })));
                    const { session, sharedSecret, encryptionPublicKey } = this.getInputsOrThrow('signAllTransactions', [], ['session', 'sharedSecret', 'encryptionPublicKey']);
                    const payload = {
                        session,
                        transactions: serializedTransactions,
                    };
                    const [nonce, encryptedPayload] = utils.encryptPayload(payload, sharedSecret);
                    const params = new URLSearchParams({
                        dapp_encryption_public_key: bs58__default["default"].encode(encryptionPublicKey),
                        nonce: bs58__default["default"].encode(nonce),
                        payload: bs58__default["default"].encode(encryptedPayload),
                        redirect_link: window.location.href,
                    });
                    const url = utils.buildUrl('signAllTransactions', params);
                    window.location.href = url;
                    // actual signatures will be retrieved upon redirect back to dapp
                    return [];
                }),
                signAndSendTransaction: (transaction, options) => _tslib.__awaiter(this, void 0, void 0, function* () {
                    const { session, sharedSecret, encryptionPublicKey } = this.getInputsOrThrow('signAndSendTransaction', [], ['session', 'sharedSecret', 'encryptionPublicKey']);
                    const payload = {
                        options,
                        session,
                        transaction: bs58__default["default"].encode(transaction.serialize({ requireAllSignatures: false })),
                    };
                    const [nonce, encryptedPayload] = utils.encryptPayload(payload, sharedSecret);
                    const params = new URLSearchParams({
                        dapp_encryption_public_key: bs58__default["default"].encode(encryptionPublicKey),
                        nonce: bs58__default["default"].encode(nonce),
                        payload: bs58__default["default"].encode(encryptedPayload),
                        redirect_link: window.location.href,
                    });
                    const url = utils.buildUrl('signAndSendTransaction', params);
                    storage.storage.method.set('signAndSendTransaction');
                    window.location.href = url;
                    // actual signature will be retrived upon redirect back to dapp
                    return { signature: '' };
                }),
                signMessage: (message) => _tslib.__awaiter(this, void 0, void 0, function* () {
                    const { session, sharedSecret, encryptionPublicKey } = this.getInputsOrThrow('signMessage', [], ['session', 'sharedSecret', 'encryptionPublicKey']);
                    const payload = {
                        message: bs58__default["default"].encode(Buffer.from(message)),
                        session,
                    };
                    const [nonce, encryptedPayload] = utils.encryptPayload(payload, sharedSecret);
                    const params = new URLSearchParams({
                        dapp_encryption_public_key: bs58__default["default"].encode(encryptionPublicKey),
                        nonce: bs58__default["default"].encode(nonce),
                        payload: bs58__default["default"].encode(encryptedPayload),
                        redirect_link: window.location.href,
                    });
                    const url = utils.buildUrl('signMessage', params);
                    window.location.href = url;
                    // actual signature will be retrived upon redirect back to dapp
                    return Buffer.from('');
                }),
                signTransaction: (transaction) => _tslib.__awaiter(this, void 0, void 0, function* () {
                    const serializedTransaction = bs58__default["default"].encode(transaction.serialize({
                        requireAllSignatures: false,
                    }));
                    const { session, sharedSecret, encryptionPublicKey } = this.getInputsOrThrow('signTransaction', [], ['session', 'sharedSecret', 'encryptionPublicKey']);
                    const payload = {
                        session,
                        transaction: serializedTransaction,
                    };
                    const [nonce, encryptedPayload] = utils.encryptPayload(payload, sharedSecret);
                    const params = new URLSearchParams({
                        dapp_encryption_public_key: bs58__default["default"].encode(encryptionPublicKey),
                        nonce: bs58__default["default"].encode(nonce),
                        payload: bs58__default["default"].encode(encryptedPayload),
                        redirect_link: window.location.href,
                    });
                    const url = utils.buildUrl('signTransaction', params);
                    window.location.href = url;
                    return transaction;
                }),
            };
        });
    }
    getConnectedAccounts() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const address = storage.storage.address.get();
            return address ? [address] : [];
        });
    }
    endSession() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const address = storage.storage.address.get();
            const session = storage.storage.session.get();
            const sharedSecret = storage.storage.sharedSecret.get();
            const encryptionPublicKey = storage.storage.encryptionPublicKey.get();
            // Clear all local storage in case of any stale state
            storage.clearStorage();
            // if there is no session/encrytion keys, then we don't need to disconnect
            if (!address || !session || !encryptionPublicKey || !sharedSecret)
                return;
            const payload = { session };
            const [nonce, encryptedPayload] = utils.encryptPayload(payload, sharedSecret);
            const params = new URLSearchParams({
                dapp_encryption_public_key: bs58__default["default"].encode(encryptionPublicKey),
                nonce: bs58__default["default"].encode(nonce),
                payload: bs58__default["default"].encode(encryptedPayload),
                redirect_link: window.location.href,
            });
            const url = utils.buildUrl('disconnect', params);
            window.location.href = url;
        });
    }
    /**
     * Helper method to get inputs from query params and localstorage
     *
     * The second argument is used to read values from the query string
     *   e.g. ['data', 'nonce'] -> params.get('data') and params.get('nonce')
     *
     * The third argument is used to read values from local storage
     *   e.g. ['address', 'message'] -> storage.address.get() and storage.message.get()
     *
     * Throws an error if any of the inputs are unable to be found in their respective locations
     */
    getInputsOrThrow(methodName, queryParams, storageParams) {
        const inputs = {};
        const queryString = new URLSearchParams(window.location.search);
        queryParams.forEach((param) => {
            const value = queryString.get(param);
            if (!value) {
                throw new Error(`[PhantomRedirect] ${methodName} called, but required input '${param}' not found in query params`);
            }
            inputs[param] = value;
        });
        storageParams.forEach((storageParam) => {
            const value = storage.storage[storageParam].get();
            if (!value) {
                throw new Error(`[PhantomRedirect] ${methodName} called, but required input '${storageParam}' not found in local storage`);
            }
            inputs[storageParam] = value;
        });
        return inputs;
    }
}

exports.PhantomRedirect = PhantomRedirect;

'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const storage = {
    address: {
        get: () => { var _a; return (_a = localStorage.getItem('dynamic_phantom_wallet_address')) !== null && _a !== void 0 ? _a : undefined; },
        remove: () => {
            localStorage.removeItem('dynamic_phantom_wallet_address');
        },
        set: (address) => {
            localStorage.setItem('dynamic_phantom_wallet_address', address.toString());
        },
    },
    encryptionPublicKey: {
        get: () => {
            const rawPublicKey = localStorage.getItem('dynamic_phantom_public_key');
            if (!rawPublicKey) {
                return undefined;
            }
            return new Uint8Array(JSON.parse(rawPublicKey));
        },
        remove: () => {
            localStorage.removeItem('dynamic_phantom_public_key');
        },
        set: (publicKey) => {
            localStorage.setItem('dynamic_phantom_public_key', JSON.stringify([...publicKey]));
        },
    },
    encryptionSecretKey: {
        get: () => {
            const rawSecretKey = localStorage.getItem('dynamic_phantom_secret_key');
            if (!rawSecretKey) {
                return undefined;
            }
            return new Uint8Array(JSON.parse(rawSecretKey));
        },
        remove: () => {
            localStorage.removeItem('dynamic_phantom_secret_key');
        },
        set: (secretKey) => {
            localStorage.setItem('dynamic_phantom_secret_key', JSON.stringify([...secretKey]));
        },
    },
    message: {
        get: () => { var _a; return (_a = localStorage.getItem('dynamic_phantom_message_to_sign')) !== null && _a !== void 0 ? _a : undefined; },
        remove: () => {
            localStorage.removeItem('dynamic_phantom_message_to_sign');
        },
        set: (message) => {
            localStorage.setItem('dynamic_phantom_message_to_sign', message);
        },
    },
    method: {
        get: () => { var _a; return (_a = localStorage.getItem('dynamic_phantom_method')) !== null && _a !== void 0 ? _a : undefined; },
        remove: () => {
            localStorage.removeItem('dynamic_phantom_method');
        },
        set: (method) => {
            localStorage.setItem('dynamic_phantom_method', method);
        },
    },
    session: {
        get: () => { var _a; return (_a = localStorage.getItem('dynamic_phantom_session')) !== null && _a !== void 0 ? _a : undefined; },
        remove: () => {
            localStorage.removeItem('dynamic_phantom_session');
        },
        set: (session) => {
            localStorage.setItem('dynamic_phantom_session', session);
        },
    },
    sharedSecret: {
        get: () => {
            const rawSharedSecret = localStorage.getItem('dynamic_phantom_shared_secret');
            if (!rawSharedSecret) {
                return undefined;
            }
            return new Uint8Array(JSON.parse(rawSharedSecret));
        },
        remove: () => {
            localStorage.removeItem('dynamic_phantom_shared_secret');
        },
        set: (sharedSecret) => {
            localStorage.setItem('dynamic_phantom_shared_secret', JSON.stringify([...sharedSecret]));
        },
    },
};
const clearStorage = () => {
    for (const key in storage) {
        storage[key].remove();
    }
};

exports.clearStorage = clearStorage;
exports.storage = storage;

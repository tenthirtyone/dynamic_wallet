'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var nacl = require('tweetnacl');
var bs58 = require('bs58');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var nacl__default = /*#__PURE__*/_interopDefaultLegacy(nacl);
var bs58__default = /*#__PURE__*/_interopDefaultLegacy(bs58);

const buildUrl = (path, params) => `https://phantom.app/ul/v1/${path}?${params.toString()}`;
const decryptPayload = (data, nonce, sharedSecret) => {
    const decryptedData = nacl__default["default"].box.open.after(bs58__default["default"].decode(data), bs58__default["default"].decode(nonce), sharedSecret);
    if (!decryptedData) {
        throw new Error('Unable to decrypt data');
    }
    return JSON.parse(Buffer.from(decryptedData).toString('utf8'));
};
const encryptPayload = (payload, sharedSecret) => {
    const nonce = nacl__default["default"].randomBytes(24);
    const encryptedPayload = nacl__default["default"].box.after(Buffer.from(JSON.stringify(payload)), nonce, sharedSecret);
    return [nonce, encryptedPayload];
};
const GENESIS_HASHES = {
    '4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY': 'testnet',
    '5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d': 'mainnet-beta',
    EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG: 'devnet',
};
const fetchCluster = (rpc) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const { result } = yield (yield fetch(rpc, {
            body: JSON.stringify({
                id: 1,
                jsonrpc: '2.0',
                method: 'getGenesisHash',
            }),
            headers: {
                'Content-Type': 'application/json',
            },
            method: 'POST',
        })).json();
        return GENESIS_HASHES[result];
    }
    catch (err) {
        return 'mainnet-beta';
    }
});

exports.buildUrl = buildUrl;
exports.decryptPayload = decryptPayload;
exports.encryptPayload = encryptPayload;
exports.fetchCluster = fetchCluster;

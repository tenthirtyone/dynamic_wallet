import { WalletSchema } from '@dynamic-labs/wallet-book';
import { ProviderCondition, WalletConnector } from '@dynamic-labs/wallet-connector-core';
import { ISolana, ExtensionLocator as ExtensionLocator } from './types';
export declare class SolProviderHelper {
    private wallet;
    constructor(wallet: WalletSchema);
    getInjectedConfig(): {
        chain: string;
        extensionLocators: {
            value: boolean;
            flag: string;
        }[];
        providerInterface?: string | undefined;
        walletStandard?: {
            features: string[];
            name: string;
        } | undefined;
        walletStandardLocators?: {
            name: string;
            locator: string;
        }[] | undefined;
        windowLocations?: string[] | undefined;
    } | undefined;
    getInstalledProvider(): ISolana | undefined;
    installedProviders(): (import("./types").ISolanaSigner | import("./types").IBackpackSolanaSigner | import("./types").ICoinbaseSolanaSigner)[];
    installedProviderLookup(extensionLocators: Array<ProviderCondition<ExtensionLocator>>): ISolana | undefined;
    findProvider(): ISolana | undefined;
    isInstalledHelper(): boolean;
    getAddress(): Promise<string | undefined>;
    connect(): Promise<ISolana | undefined>;
    signMessage(messageToSign: string): Promise<string | undefined>;
    handleAccountChange(walletConnector: WalletConnector, web3Provider: ISolana, address: string): Promise<void>;
    _setupEventListeners(walletConnector: WalletConnector): void;
    _teardownEventListeners(): void;
    getConnectedAccounts(): Promise<string[]>;
}

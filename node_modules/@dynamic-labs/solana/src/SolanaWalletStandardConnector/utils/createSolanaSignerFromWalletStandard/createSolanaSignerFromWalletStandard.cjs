'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var web3_js = require('@solana/web3.js');
var utils = require('../../../phantomRedirect/utils.cjs');

const isVersionedTransaction = (transaction) => !('instructions' in transaction);
const createSolanaSignerFromWalletStandard = (wallet, walletConnector) => {
    const features = wallet.features;
    const getCurrentAccount = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const address = yield walletConnector.getAddress();
        const account = wallet.accounts.find((account) => account.address === address);
        if (!account) {
            throw new Error('Account not found');
        }
        return account;
    });
    const getChain = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const rpc = (_b = (_a = walletConnector.solNetworks[0].privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : walletConnector.solNetworks[0].rpcUrls[0];
        const cluster = yield utils.fetchCluster(rpc);
        return `solana:${cluster}`;
    });
    const signTransaction = (transaction) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const account = yield getCurrentAccount();
        const signTransactionResult = yield features['solana:signTransaction'].signTransaction({
            account,
            chain: yield getChain(),
            transaction: transaction.serialize({
                requireAllSignatures: false,
            }),
        });
        if (isVersionedTransaction(transaction)) {
            return web3_js.VersionedTransaction.deserialize(signTransactionResult[0].signedTransaction);
        }
        return web3_js.Transaction.from(signTransactionResult[0].signedTransaction);
    });
    const signAllTransactions = (transactions) => _tslib.__awaiter(void 0, void 0, void 0, function* () { return Promise.all(transactions.map(signTransaction)); });
    const signAndSendTransaction = (transaction) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const account = yield getCurrentAccount();
        const signedTransactions = yield features['solana:signAndSendTransaction'].signAndSendTransaction({
            account,
            chain: yield getChain(),
            transaction: transaction.serialize(),
        });
        const [{ signature }] = signedTransactions;
        return { signature: new TextDecoder().decode(signature) };
    });
    const signMessage = (message) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const account = yield getCurrentAccount();
        const messages = yield features['solana:signMessage'].signMessage({
            account,
            message,
        });
        return messages[0].signature;
    });
    return {
        addListener: () => {
            throw new Error('Not implemented');
        },
        connect: () => {
            throw new Error('Not implemented');
        },
        disconnect: () => walletConnector.endSession(),
        emit: () => {
            throw new Error('Not implemented');
        },
        eventNames: () => {
            throw new Error('Not implemented');
        },
        isBackpack: false,
        isBraveWallet: false,
        isConnected: true,
        isExodus: false,
        isGlow: false,
        isMagicEden: false,
        isPhantom: false,
        isSolflare: false,
        listenerCount: () => {
            throw new Error('Not implemented');
        },
        listeners: () => {
            throw new Error('Not implemented');
        },
        off: () => {
            throw new Error('Not implemented');
        },
        on: () => {
            throw new Error('Not implemented');
        },
        once: () => {
            throw new Error('Not implemented');
        },
        providers: [],
        get publicKey() {
            return new web3_js.PublicKey(wallet.accounts[0].publicKey);
        },
        removeAllListeners: () => {
            throw new Error('Not implemented');
        },
        removeListener: () => {
            throw new Error('Not implemented');
        },
        send: () => {
            throw new Error('Not implemented');
        },
        signAllTransactions,
        signAndSendTransaction,
        signMessage,
        signTransaction,
    };
};

exports.createSolanaSignerFromWalletStandard = createSolanaSignerFromWalletStandard;

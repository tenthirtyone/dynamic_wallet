'use client'
import { __awaiter } from '../_virtual/_tslib.js';
import { PublicKey, Connection, Transaction, TransactionInstruction } from '@solana/web3.js';
import { WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import { DynamicError, NotSupportedError, isLedgerAddressViaVerifiedCredentials } from '@dynamic-labs/utils';
import { findWalletBookWallet } from '@dynamic-labs/wallet-book';
import { extractNonce } from './utils/extractNonce.js';
import { getGenesisHashLSKey } from './utils/getGenesisHashLSKey.js';

const MEMO_PROGRAM_ID = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr');
class SolWalletConnector extends WalletConnectorBase {
    constructor(opts) {
        var _a;
        super(opts);
        this.isHardwareWalletEnabled = false;
        this.verifiedCredentials = [];
        this.supportedChains = ['SOL'];
        this.connectedChain = 'SOL';
        this.solNetworks = opts.solNetworks;
        this.chainRpcProviders = opts.chainRpcProviders;
        (_a = this.chainRpcProviders) === null || _a === void 0 ? void 0 : _a.registerSolanaProviders();
    }
    getNetwork() {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = this.getWalletClient();
            let genesisHash = localStorage.getItem(getGenesisHashLSKey(provider.rpcEndpoint));
            if (!genesisHash) {
                genesisHash = yield provider.getGenesisHash();
                localStorage.setItem(getGenesisHashLSKey(provider.rpcEndpoint), genesisHash);
            }
            genesisHash = genesisHash.substring(0, 32);
            // see: https://github.com/ChainAgnostic/namespaces/blob/main/solana/caip2.md
            let network;
            if (genesisHash === '5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp') {
                network = 'mainnet';
            }
            else if (genesisHash === 'EtWTRABZaYq6iMfeYKouRu166VU2xqa1') {
                network = 'devnet';
            }
            else {
                network = 'testnet';
            }
            return network;
        });
    }
    endSession() {
        return __awaiter(this, void 0, void 0, function* () {
            localStorage.removeItem(getGenesisHashLSKey(this.getWalletClient().rpcEndpoint));
        });
    }
    getWalletClient() {
        var _a;
        const [network] = this.solNetworks;
        if (!network) {
            throw new DynamicError('No enabled networks');
        }
        const rpcUrl = ((_a = network.privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) || network.rpcUrls[0];
        return new Connection(rpcUrl, 'confirmed');
    }
    getPublicClient() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (this.solNetworks.length === 0)
                return;
            const configurations = {
                cosmos: [],
                evm: undefined,
                solana: this.solNetworks,
                starknet: undefined,
            };
            return (_b = (_a = this.chainRpcProviders) === null || _a === void 0 ? void 0 : _a.getSolanaRpcProviderByChainId(configurations, '101')) === null || _b === void 0 ? void 0 : _b.provider;
        });
    }
    getBalance() {
        return __awaiter(this, void 0, void 0, function* () {
            const signer = yield this.getSigner();
            if (!signer || !signer.publicKey)
                return;
            const publicKey = new PublicKey(signer.publicKey.toString());
            const balance = this.lamportsToSol(yield this.getWalletClient().getBalance(publicKey));
            return balance.toString();
        });
    }
    // Solana uses lamports as the smallest unit of currency. This converts lamports to SOL.
    lamportsToSol(lamports) {
        return lamports / 1000000000;
    }
    canConnectWithHardwareWallet() {
        const wallet = findWalletBookWallet(this.walletBook, this.key);
        if (!wallet || !wallet.hardwareWallets)
            return false;
        return wallet.hardwareWallets.includes('ledger');
    }
    signMessage(messageToSign) {
        const _super = Object.create(null, {
            signMessage: { get: () => super.signMessage }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isHardwareWalletEnabled) {
                throw new NotSupportedError(`Message signing is currently not supported on ${this.name} hardware wallet.
          You can use signMessageViaTransaction instead to achieve similar functionality
          by signing a transaction with a memo instruction.
          You can read more about it here https://github.com/solana-labs/solana/issues/21366`);
            }
            return _super.signMessage.call(this, messageToSign);
        });
    }
    proveOwnership(messageToSign) {
        const _super = Object.create(null, {
            proveOwnership: { get: () => super.proveOwnership }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isHardwareWalletEnabled) {
                const nonce = extractNonce(messageToSign);
                if (!nonce) {
                    throw new DynamicError('Nonce missing');
                }
                return this.signMessageViaTransaction(nonce);
            }
            return _super.proveOwnership.call(this, messageToSign);
        });
    }
    signMessageViaTransaction(messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            const address = yield this.getAddress();
            if (!address) {
                throw new DynamicError('Address missing');
            }
            const transaction = this.buildAuthTx(messageToSign);
            transaction.feePayer = new PublicKey(address);
            transaction.recentBlockhash = (yield this.getWalletClient().getLatestBlockhash()).blockhash;
            const signer = yield this.getSigner();
            if (!signer) {
                throw new DynamicError('Signer not found');
            }
            const signedTransaction = yield signer.signTransaction(transaction);
            const serializedSignedTransaction = signedTransaction.serialize();
            /**
             * Serializing the transaction and adding the type 'Buffer' is required
             * when connecting with backpack + Ledger, because the returned object is not correctly
             * serialized
             */
            return JSON.stringify({
                signedTransaction: {
                    data: Array.from(serializedSignedTransaction),
                    type: 'Buffer',
                },
            });
        });
    }
    buildAuthTx(message) {
        const transaction = new Transaction();
        transaction.add(new TransactionInstruction({
            data: Buffer.from(message, 'utf8'),
            keys: [],
            programId: MEMO_PROGRAM_ID,
        }));
        return transaction;
    }
    setVerifiedCredentials(verifiedCredentials) {
        this.verifiedCredentials = verifiedCredentials;
    }
    isLedgerAddress(address) {
        return isLedgerAddressViaVerifiedCredentials(address, this.verifiedCredentials);
    }
}

export { SolWalletConnector };

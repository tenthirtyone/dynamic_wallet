'use client'
import { __awaiter } from '../../_virtual/_tslib.js';
import { findWalletBookWallet } from '@dynamic-labs/wallet-book';
import { isMobile, template } from '@dynamic-labs/utils';
import { SolProviderHelper } from '../solProviderHelper.js';
import { SolWalletConnector } from '../solWalletConnector.js';
import { SignMessageNotSupportedError } from '../errors/SignMessageNotSupportedError.js';

class InjectedWalletBase extends SolWalletConnector {
    getSolProviderHelper() {
        if (!this.wallet) {
            this.wallet = findWalletBookWallet(this.walletBook, this.key);
        }
        if (this.wallet && !this.solProviderHelper) {
            this.solProviderHelper = new SolProviderHelper(this.wallet);
        }
        return this.solProviderHelper;
    }
    getProvider() {
        var _a;
        return (_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a.getInstalledProvider();
    }
    setupEventListeners() {
        var _a;
        (_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a._setupEventListeners(this);
    }
    teardownEventListeners() {
        var _a;
        (_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a._teardownEventListeners();
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            yield ((_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a.connect());
        });
    }
    getSigner() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a.connect();
        });
    }
    isInstalledOnBrowser() {
        var _a;
        return Boolean((_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a.isInstalledHelper());
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (!this.isInstalledOnBrowser()) {
                if (isMobile() &&
                    ((_a = this.wallet) === null || _a === void 0 ? void 0 : _a.mobile) &&
                    this.wallet.mobile.inAppBrowser) {
                    const inAppBrowserCompiledTemplate = template(this.wallet.mobile.inAppBrowser);
                    const deepLink = inAppBrowserCompiledTemplate({
                        encodedDappURI: encodeURIComponent(window.location.toString()),
                    });
                    window.location.assign(deepLink);
                }
                return;
            }
            return (_b = this.getSolProviderHelper()) === null || _b === void 0 ? void 0 : _b.getAddress();
        });
    }
    signMessage(messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const walletAddress = yield ((_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a.getAddress());
            if (walletAddress && this.isLedgerAddress(walletAddress)) {
                throw new SignMessageNotSupportedError(this.name);
            }
            return (_b = this.getSolProviderHelper()) === null || _b === void 0 ? void 0 : _b.signMessage(messageToSign);
        });
    }
    getConnectedAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            return (_b = (_a = this.getSolProviderHelper()) === null || _a === void 0 ? void 0 : _a.getConnectedAccounts()) !== null && _b !== void 0 ? _b : [];
        });
    }
}

export { InjectedWalletBase };

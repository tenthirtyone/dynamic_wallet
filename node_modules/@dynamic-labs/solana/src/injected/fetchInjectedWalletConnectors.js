'use client'
import { CoinbaseSolana } from '../CoinbaseSolana.js';
import { Solflare } from '../Solflare.js';
import { SolanaWalletStandardConnector } from '../SolanaWalletStandardConnector/SolanaWalletStandardConnector.js';
import { InjectedWalletBase } from './InjectedWalletBase.js';
import { BackpackSol } from './BackpackSol.js';

const injectedWalletOverrides = [
    CoinbaseSolana,
    BackpackSol,
    Solflare,
];
const filteredInjectedWalletKeysOverrides = [
    'coinbasesolana',
    'phantom',
    'phantomledger',
    'backpacksol',
    'solflare',
];
const fetchInjectedWalletConnectors = ({ walletBook, }) => {
    var _a;
    return Object.entries((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {})
        .filter(([key, wallet]) => {
        var _a;
        const isSolanaWallet = Boolean((_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.chain === 'sol'));
        const shouldBeFiltered = filteredInjectedWalletKeysOverrides.includes(key);
        return isSolanaWallet && !shouldBeFiltered;
    })
        .map(([key, wallet]) => {
        var _a;
        const { shortName } = wallet;
        const name = shortName || wallet.name;
        const hasWalletStandard = Boolean((_a = wallet.injectedConfig) === null || _a === void 0 ? void 0 : _a.find((config) => config.walletStandard));
        if (hasWalletStandard) {
            const isWalletStandardPresent = Boolean(SolanaWalletStandardConnector.getWallet(walletBook, key));
            if (isWalletStandardPresent) {
                return class extends SolanaWalletStandardConnector {
                    constructor(props) {
                        super(Object.assign({}, props));
                        this.name = name;
                        this.overrideKey = key;
                    }
                };
            }
        }
        return class extends InjectedWalletBase {
            constructor(props) {
                super(Object.assign({}, props));
                this.name = name;
                this.wallet = wallet;
                // this is the key from the wallet book entry so that we don't purely rely on the normalized name
                this.overrideKey = key;
            }
        };
    });
};

export { fetchInjectedWalletConnectors, injectedWalletOverrides };

import { JwtVerifiedCredential, TurnkeyWalletProperties } from '@dynamic-labs/sdk-api-core';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import type { AuthenticatorRecoveryHandler, IEmailWalletConnector, IPasskeyWalletConnector, ISMSWalletConnector, WalletConnector } from '@dynamic-labs/wallet-connector-core';
import { TurnkeyWalletConnectorNameAndKey } from '../../types';
import { ExportHandler } from '../ExportHandler';
export type TurnkeyConnectorBaseProps = {
    walletBook: WalletBookSchema;
    appName?: string;
};
type ITurnkeyWalletConnector = IEmailWalletConnector & IPasskeyWalletConnector & ISMSWalletConnector;
export declare abstract class TurnkeyWalletConnectorBase extends WalletConnectorBase implements ITurnkeyWalletConnector {
    requiresNonDynamicEmailOtp: boolean;
    name: string;
    isEmbeddedWallet: boolean;
    private appName;
    private _email;
    private _phone;
    private _passkeyIdentifier;
    private _verifiedCredential;
    private __authenticatorMethodHandler;
    private __exportHandler;
    constructor(nameAndKey: TurnkeyWalletConnectorNameAndKey, props: TurnkeyConnectorBaseProps);
    getWebAuthnAttestation(): Promise<{
        attestation: {
            attestationObject: string;
            clientDataJson: string;
            credentialId: string;
            transports: import("@dynamic-labs/sdk-api-core").AuthenticatorTransportProtocol[];
        };
        challenge: string;
        displayName: string;
    }>;
    getAuthenticatorHandler(): AuthenticatorRecoveryHandler;
    getExportHandler(): ExportHandler;
    get email(): string | null | undefined;
    setEmail(email: string | null | undefined): void;
    get phone(): string | null | undefined;
    setPhone(phone: string | null | undefined): void;
    get passkeyIdentifier(): string | null | undefined;
    setPasskeyIdentifier(passkeyIdentifier: string | null | undefined): void;
    clearEmail(): void;
    getAddress(): Promise<string | undefined>;
    getConnectedAccounts(): Promise<string[]>;
    getMobileOrInstalledWallet(): WalletConnector;
    get turnkeyAddress(): string | undefined;
    get walletProperties(): TurnkeyWalletProperties | undefined;
    set verifiedCredential(verifiedCredential: JwtVerifiedCredential | undefined);
    get verifiedCredential(): JwtVerifiedCredential | undefined;
}
export {};

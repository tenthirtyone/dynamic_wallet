'use client'
import { __awaiter } from '../../../_virtual/_tslib.js';
import { WalletConnectorBase, logger } from '@dynamic-labs/wallet-connector-core';
import { getTLD, PlatformService } from '@dynamic-labs/utils';
import { base64UrlEncode } from '../utils/base64UrlEncode/base64UrlEncode.js';
import { generateRandomBuffer } from '../utils/generateRandomBuffer/generateRandomBuffer.js';
import { convertAttestationTransports } from '../utils/convertAttestationTransports/convertAttestationTransports.js';
import '@solana/web3.js';
import { turnkeyAuthenticatorRecoveryHandler } from '../AuthenticatorHandler/TurnkeyAuthenticatorRecoveryHandler.js';
import { ExportHandler } from '../ExportHandler/ExportHandler.js';
import { PasskeyService } from '../utils/PasskeyService/PasskeyService.js';

class TurnkeyWalletConnectorBase extends WalletConnectorBase {
    constructor(nameAndKey, props) {
        super(props);
        // Public fields
        this.requiresNonDynamicEmailOtp = false;
        this.isEmbeddedWallet = true;
        if (!props.appName) {
            throw new Error('appName not set');
        }
        this.name = nameAndKey.name;
        this.overrideKey = nameAndKey.key;
        this.appName = props.appName;
        this.__authenticatorMethodHandler = turnkeyAuthenticatorRecoveryHandler;
        this.__exportHandler = new ExportHandler();
    }
    getWebAuthnAttestation() {
        return __awaiter(this, void 0, void 0, function* () {
            const challenge = generateRandomBuffer();
            const authenticatorUserId = generateRandomBuffer();
            const { email, passkeyIdentifier } = this;
            if (!email && !passkeyIdentifier) {
                throw new Error('Email or passkeyIdentifier must be set to register a webauthn credential.');
            }
            const displayName = email || `${this.appName} - ${passkeyIdentifier}`;
            const webAuthnCreateParams = {
                publicKey: {
                    authenticatorSelection: {
                        authenticatorAttachment: undefined,
                        requireResidentKey: false,
                        residentKey: 'preferred',
                        userVerification: 'discouraged',
                    },
                    challenge,
                    pubKeyCredParams: [
                        {
                            alg: -7,
                            type: 'public-key',
                        },
                    ],
                    rp: {
                        id: getTLD(),
                        name: this.appName,
                    },
                    user: {
                        displayName,
                        id: authenticatorUserId,
                        name: email || `${this.appName} - ${passkeyIdentifier}`,
                    },
                },
            };
            let attestation;
            try {
                attestation = yield PasskeyService.getWebAuthnAttestation(webAuthnCreateParams);
            }
            catch (error) {
                logger.warn(`Unable to register webauthn credential on the current page's TLD ${getTLD()}. Falling back to using hostname. ${PlatformService.getHostname()}`, error);
                // Create the passkey on the hostname instead.
                webAuthnCreateParams.publicKey.rp.id = PlatformService.getHostname();
                attestation = yield PasskeyService.getWebAuthnAttestation(webAuthnCreateParams);
            }
            return {
                attestation: {
                    attestationObject: attestation.attestationObject,
                    clientDataJson: attestation.clientDataJson,
                    credentialId: attestation.credentialId,
                    transports: convertAttestationTransports(attestation.transports),
                },
                challenge: base64UrlEncode(challenge),
                displayName,
            };
        });
    }
    getAuthenticatorHandler() {
        return this.__authenticatorMethodHandler;
    }
    getExportHandler() {
        return this.__exportHandler;
    }
    // Public methods
    get email() {
        return this._email;
    }
    setEmail(email) {
        this._email = email;
    }
    get phone() {
        return this._phone;
    }
    setPhone(phone) {
        this._phone = phone;
    }
    get passkeyIdentifier() {
        return this._passkeyIdentifier;
    }
    setPasskeyIdentifier(passkeyIdentifier) {
        this._passkeyIdentifier = passkeyIdentifier;
    }
    clearEmail() {
        this._email = null;
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.verifiedCredential) === null || _a === void 0 ? void 0 : _a.address;
        });
    }
    getConnectedAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const address = (_a = this.verifiedCredential) === null || _a === void 0 ? void 0 : _a.address;
            if (!address) {
                return [];
            }
            return [address];
        });
    }
    getMobileOrInstalledWallet() {
        return this;
    }
    get turnkeyAddress() {
        var _a;
        const { address } = (_a = this.verifiedCredential) !== null && _a !== void 0 ? _a : {};
        return address;
    }
    get walletProperties() {
        const { walletProperties } = this.verifiedCredential || {};
        return walletProperties;
    }
    // Private methods
    set verifiedCredential(verifiedCredential) {
        this._verifiedCredential = verifiedCredential;
    }
    get verifiedCredential() {
        return this._verifiedCredential;
    }
}

export { TurnkeyWalletConnectorBase };

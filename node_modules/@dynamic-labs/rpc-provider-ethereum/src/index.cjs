'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var viem = require('viem');
var rpcProviders = require('@dynamic-labs/rpc-providers');
var utils = require('@dynamic-labs/utils');

/* eslint-disable @typescript-eslint/no-namespace */
rpcProviders.ChainRpcProviders.getEvmProviderByChainId = (config, chainId) => {
    var _a;
    const rpcProviders$1 = rpcProviders.ChainRpcProviders.getProviders(config);
    const provider = (_a = rpcProviders$1['evm']) === null || _a === void 0 ? void 0 : _a.find((provider) => provider.chainId === chainId);
    return provider;
};
rpcProviders.ChainRpcProviders.registerEvmProviders = () => {
    rpcProviders.ChainRpcProviders.registerChainProviders(rpcProviders.ProviderChain.EVM, (config) => {
        const rpcProviders = {};
        if (config === null || config === void 0 ? void 0 : config.evm) {
            rpcProviders.evm = utils.parseEvmNetworks(config.evm).map((network) => {
                var _a;
                const rpcUrl = ((_a = network.privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) || network.rpcUrls[0];
                const provider = viem.createPublicClient({
                    chain: utils.getOrMapViemChain(network),
                    transport: viem.http(rpcUrl),
                });
                return {
                    chainId: network.chainId,
                    chainName: network.name,
                    provider,
                };
            });
        }
        return rpcProviders.evm;
    });
};

Object.keys(rpcProviders).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () { return rpcProviders[k]; }
  });
});

import { request, signedRequest } from '../../../../../base.mjs';

/* @generated by `@turnkey/fetchers`. DO NOT EDIT BY HAND */
/**
 * Get Activity
 *
 * Get details about an Activity
 *
 * `POST /public/v1/query/get_activity`
 */
const getActivity = (input) => request({
    uri: "/public/v1/query/get_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivity}
 */
const signGetActivity = (input, options) => signedRequest({
    uri: "/public/v1/query/get_activity",
    body: input.body,
    options,
});
/**
 * Get API key
 *
 * Get details about an API key
 *
 * `POST /public/v1/query/get_api_key`
 */
const getApiKey = (input) => request({
    uri: "/public/v1/query/get_api_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKey}
 */
const signGetApiKey = (input, options) => signedRequest({
    uri: "/public/v1/query/get_api_key",
    body: input.body,
    options,
});
/**
 * Get API key
 *
 * Get details about API keys for a user
 *
 * `POST /public/v1/query/get_api_keys`
 */
const getApiKeys = (input) => request({
    uri: "/public/v1/query/get_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKeys}
 */
const signGetApiKeys = (input, options) => signedRequest({
    uri: "/public/v1/query/get_api_keys",
    body: input.body,
    options,
});
/**
 * Get Authenticator
 *
 * Get details about an authenticator
 *
 * `POST /public/v1/query/get_authenticator`
 */
const getAuthenticator = (input) => request({
    uri: "/public/v1/query/get_authenticator",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticator}
 */
const signGetAuthenticator = (input, options) => signedRequest({
    uri: "/public/v1/query/get_authenticator",
    body: input.body,
    options,
});
/**
 * Get Authenticators
 *
 * Get details about authenticators for a user
 *
 * `POST /public/v1/query/get_authenticators`
 */
const getAuthenticators = (input) => request({
    uri: "/public/v1/query/get_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticators}
 */
const signGetAuthenticators = (input, options) => signedRequest({
    uri: "/public/v1/query/get_authenticators",
    body: input.body,
    options,
});
/**
 * Get Organization
 *
 * Get details about an Organization
 *
 * `POST /public/v1/query/get_organization`
 */
const getOrganization = (input) => request({
    uri: "/public/v1/query/get_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganization}
 */
const signGetOrganization = (input, options) => signedRequest({
    uri: "/public/v1/query/get_organization",
    body: input.body,
    options,
});
/**
 * Get Policy
 *
 * Get details about a Policy
 *
 * `POST /public/v1/query/get_policy`
 */
const getPolicy = (input) => request({
    uri: "/public/v1/query/get_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicy}
 */
const signGetPolicy = (input, options) => signedRequest({
    uri: "/public/v1/query/get_policy",
    body: input.body,
    options,
});
/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * `POST /public/v1/query/get_private_key`
 */
const getPrivateKey = (input) => request({
    uri: "/public/v1/query/get_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKey}
 */
const signGetPrivateKey = (input, options) => signedRequest({
    uri: "/public/v1/query/get_private_key",
    body: input.body,
    options,
});
/**
 * Get User
 *
 * Get details about a User
 *
 * `POST /public/v1/query/get_user`
 */
const getUser = (input) => request({
    uri: "/public/v1/query/get_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUser}
 */
const signGetUser = (input, options) => signedRequest({
    uri: "/public/v1/query/get_user",
    body: input.body,
    options,
});
/**
 * Get Wallet
 *
 * Get details about a Wallet
 *
 * `POST /public/v1/query/get_wallet`
 */
const getWallet = (input) => request({
    uri: "/public/v1/query/get_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallet}
 */
const signGetWallet = (input, options) => signedRequest({
    uri: "/public/v1/query/get_wallet",
    body: input.body,
    options,
});
/**
 * List Activities
 *
 * List all Activities within an Organization
 *
 * `POST /public/v1/query/list_activities`
 */
const getActivities = (input) => request({
    uri: "/public/v1/query/list_activities",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivities}
 */
const signGetActivities = (input, options) => signedRequest({
    uri: "/public/v1/query/list_activities",
    body: input.body,
    options,
});
/**
 * List Policies
 *
 * List all Policies within an Organization
 *
 * `POST /public/v1/query/list_policies`
 */
const getPolicies = (input) => request({
    uri: "/public/v1/query/list_policies",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicies}
 */
const signGetPolicies = (input, options) => signedRequest({
    uri: "/public/v1/query/list_policies",
    body: input.body,
    options,
});
/**
 * List Private Key Tags
 *
 * List all Private Key Tags within an Organization
 *
 * `POST /public/v1/query/list_private_key_tags`
 */
const listPrivateKeyTags = (input) => request({
    uri: "/public/v1/query/list_private_key_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListPrivateKeyTags}
 */
const signListPrivateKeyTags = (input, options) => signedRequest({
    uri: "/public/v1/query/list_private_key_tags",
    body: input.body,
    options,
});
/**
 * List Private Keys
 *
 * List all Private Keys within an Organization
 *
 * `POST /public/v1/query/list_private_keys`
 */
const getPrivateKeys = (input) => request({
    uri: "/public/v1/query/list_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKeys}
 */
const signGetPrivateKeys = (input, options) => signedRequest({
    uri: "/public/v1/query/list_private_keys",
    body: input.body,
    options,
});
/**
 * List User Tags
 *
 * List all User Tags within an Organization
 *
 * `POST /public/v1/query/list_user_tags`
 */
const listUserTags = (input) => request({
    uri: "/public/v1/query/list_user_tags",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListUserTags}
 */
const signListUserTags = (input, options) => signedRequest({
    uri: "/public/v1/query/list_user_tags",
    body: input.body,
    options,
});
/**
 * List Users
 *
 * List all Users within an Organization
 *
 * `POST /public/v1/query/list_users`
 */
const getUsers = (input) => request({
    uri: "/public/v1/query/list_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUsers}
 */
const signGetUsers = (input, options) => signedRequest({
    uri: "/public/v1/query/list_users",
    body: input.body,
    options,
});
/**
 * List Wallets Accounts
 *
 * List all Accounts wirhin a Wallet
 *
 * `POST /public/v1/query/list_wallet_accounts`
 */
const getWalletAccounts = (input) => request({
    uri: "/public/v1/query/list_wallet_accounts",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWalletAccounts}
 */
const signGetWalletAccounts = (input, options) => signedRequest({
    uri: "/public/v1/query/list_wallet_accounts",
    body: input.body,
    options,
});
/**
 * List Wallets
 *
 * List all Wallets within an Organization
 *
 * `POST /public/v1/query/list_wallets`
 */
const getWallets = (input) => request({
    uri: "/public/v1/query/list_wallets",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallets}
 */
const signGetWallets = (input, options) => signedRequest({
    uri: "/public/v1/query/list_wallets",
    body: input.body,
    options,
});
/**
 * Who am I?
 *
 * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN users.
 *
 * `POST /public/v1/query/whoami`
 */
const getWhoami = (input) => request({
    uri: "/public/v1/query/whoami",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWhoami}
 */
const signGetWhoami = (input, options) => signedRequest({
    uri: "/public/v1/query/whoami",
    body: input.body,
    options,
});
/**
 * Approve Activity
 *
 * Approve an Activity
 *
 * `POST /public/v1/submit/approve_activity`
 */
const approveActivity = (input) => request({
    uri: "/public/v1/submit/approve_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link ApproveActivity}
 */
const signApproveActivity = (input, options) => signedRequest({
    uri: "/public/v1/submit/approve_activity",
    body: input.body,
    options,
});
/**
 * Create API Keys
 *
 * Add api keys to an existing User
 *
 * `POST /public/v1/submit/create_api_keys`
 */
const createApiKeys = (input) => request({
    uri: "/public/v1/submit/create_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiKeys}
 */
const signCreateApiKeys = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_api_keys",
    body: input.body,
    options,
});
/**
 * Create API-only Users
 *
 * Create API-only Users in an existing Organization
 *
 * `POST /public/v1/submit/create_api_only_users`
 */
const createApiOnlyUsers = (input) => request({
    uri: "/public/v1/submit/create_api_only_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiOnlyUsers}
 */
const signCreateApiOnlyUsers = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_api_only_users",
    body: input.body,
    options,
});
/**
 * Create Authenticators
 *
 * Create Authenticators to authenticate requests to Turnkey
 *
 * `POST /public/v1/submit/create_authenticators`
 */
const createAuthenticators = (input) => request({
    uri: "/public/v1/submit/create_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateAuthenticators}
 */
const signCreateAuthenticators = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_authenticators",
    body: input.body,
    options,
});
/**
 * Create Invitations
 *
 * Create Invitations to join an existing Organization
 *
 * `POST /public/v1/submit/create_invitations`
 */
const createInvitations = (input) => request({
    uri: "/public/v1/submit/create_invitations",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateInvitations}
 */
const signCreateInvitations = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_invitations",
    body: input.body,
    options,
});
/**
 * Create Policy
 *
 * Create a new Policy
 *
 * `POST /public/v1/submit/create_policy`
 */
const createPolicy = (input) => request({
    uri: "/public/v1/submit/create_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicy}
 */
const signCreatePolicy = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_policy",
    body: input.body,
    options,
});
/**
 * Create Private Key Tag
 *
 * Create a private key tag and add it to private keys.
 *
 * `POST /public/v1/submit/create_private_key_tag`
 */
const createPrivateKeyTag = (input) => request({
    uri: "/public/v1/submit/create_private_key_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeyTag}
 */
const signCreatePrivateKeyTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_private_key_tag",
    body: input.body,
    options,
});
/**
 * Create Private Keys
 *
 * Create new Private Keys
 *
 * `POST /public/v1/submit/create_private_keys`
 */
const createPrivateKeys = (input) => request({
    uri: "/public/v1/submit/create_private_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeys}
 */
const signCreatePrivateKeys = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_private_keys",
    body: input.body,
    options,
});
/**
 * Create Sub-Organization
 *
 * Create a new Sub-Organization
 *
 * `POST /public/v1/submit/create_sub_organization`
 */
const createSubOrganization = (input) => request({
    uri: "/public/v1/submit/create_sub_organization",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateSubOrganization}
 */
const signCreateSubOrganization = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_sub_organization",
    body: input.body,
    options,
});
/**
 * Create User Tag
 *
 * Create a user tag and add it to users.
 *
 * `POST /public/v1/submit/create_user_tag`
 */
const createUserTag = (input) => request({
    uri: "/public/v1/submit/create_user_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUserTag}
 */
const signCreateUserTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_user_tag",
    body: input.body,
    options,
});
/**
 * Create Users
 *
 * Create Users in an existing Organization
 *
 * `POST /public/v1/submit/create_users`
 */
const createUsers = (input) => request({
    uri: "/public/v1/submit/create_users",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUsers}
 */
const signCreateUsers = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_users",
    body: input.body,
    options,
});
/**
 * Create Wallet
 *
 * Create a Wallet and derive addresses
 *
 * `POST /public/v1/submit/create_wallet`
 */
const createWallet = (input) => request({
    uri: "/public/v1/submit/create_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWallet}
 */
const signCreateWallet = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_wallet",
    body: input.body,
    options,
});
/**
 * Create Wallet Accounts
 *
 * Derive additional addresses using an existing wallet
 *
 * `POST /public/v1/submit/create_wallet_accounts`
 */
const createWalletAccounts = (input) => request({
    uri: "/public/v1/submit/create_wallet_accounts",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWalletAccounts}
 */
const signCreateWalletAccounts = (input, options) => signedRequest({
    uri: "/public/v1/submit/create_wallet_accounts",
    body: input.body,
    options,
});
/**
 * Delete API Keys
 *
 * Remove api keys from a User
 *
 * `POST /public/v1/submit/delete_api_keys`
 */
const deleteApiKeys = (input) => request({
    uri: "/public/v1/submit/delete_api_keys",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteApiKeys}
 */
const signDeleteApiKeys = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_api_keys",
    body: input.body,
    options,
});
/**
 * Delete Authenticators
 *
 * Remove authenticators from a User
 *
 * `POST /public/v1/submit/delete_authenticators`
 */
const deleteAuthenticators = (input) => request({
    uri: "/public/v1/submit/delete_authenticators",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteAuthenticators}
 */
const signDeleteAuthenticators = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_authenticators",
    body: input.body,
    options,
});
/**
 * Delete Invitation
 *
 * Delete an existing Invitation
 *
 * `POST /public/v1/submit/delete_invitation`
 */
const deleteInvitation = (input) => request({
    uri: "/public/v1/submit/delete_invitation",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteInvitation}
 */
const signDeleteInvitation = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_invitation",
    body: input.body,
    options,
});
/**
 * Delete Policy
 *
 * Delete an existing Policy
 *
 * `POST /public/v1/submit/delete_policy`
 */
const deletePolicy = (input) => request({
    uri: "/public/v1/submit/delete_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePolicy}
 */
const signDeletePolicy = (input, options) => signedRequest({
    uri: "/public/v1/submit/delete_policy",
    body: input.body,
    options,
});
/**
 * Perform Email Auth
 *
 * Authenticate a user via Email
 *
 * `POST /public/v1/submit/email_auth`
 */
const emailAuth = (input) => request({
    uri: "/public/v1/submit/email_auth",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link EmailAuth}
 */
const signEmailAuth = (input, options) => signedRequest({
    uri: "/public/v1/submit/email_auth",
    body: input.body,
    options,
});
/**
 * Export Private Key
 *
 * Exports a Private Key
 *
 * `POST /public/v1/submit/export_private_key`
 */
const exportPrivateKey = (input) => request({
    uri: "/public/v1/submit/export_private_key",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportPrivateKey}
 */
const signExportPrivateKey = (input, options) => signedRequest({
    uri: "/public/v1/submit/export_private_key",
    body: input.body,
    options,
});
/**
 * Export Wallet
 *
 * Exports a Wallet
 *
 * `POST /public/v1/submit/export_wallet`
 */
const exportWallet = (input) => request({
    uri: "/public/v1/submit/export_wallet",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWallet}
 */
const signExportWallet = (input, options) => signedRequest({
    uri: "/public/v1/submit/export_wallet",
    body: input.body,
    options,
});
/**
 * Export Wallet Account
 *
 * Exports a Wallet Account
 *
 * `POST /public/v1/submit/export_wallet_account`
 */
const exportWalletAccount = (input) => request({
    uri: "/public/v1/submit/export_wallet_account",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWalletAccount}
 */
const signExportWalletAccount = (input, options) => signedRequest({
    uri: "/public/v1/submit/export_wallet_account",
    body: input.body,
    options,
});
/**
 * Init Email Recovery
 *
 * Initializes a new email recovery
 *
 * `POST /public/v1/submit/init_user_email_recovery`
 */
const initUserEmailRecovery = (input) => request({
    uri: "/public/v1/submit/init_user_email_recovery",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitUserEmailRecovery}
 */
const signInitUserEmailRecovery = (input, options) => signedRequest({
    uri: "/public/v1/submit/init_user_email_recovery",
    body: input.body,
    options,
});
/**
 * Recover a user
 *
 * Completes the process of recovering a user by adding an authenticator
 *
 * `POST /public/v1/submit/recover_user`
 */
const recoverUser = (input) => request({
    uri: "/public/v1/submit/recover_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link RecoverUser}
 */
const signRecoverUser = (input, options) => signedRequest({
    uri: "/public/v1/submit/recover_user",
    body: input.body,
    options,
});
/**
 * Reject Activity
 *
 * Reject an Activity
 *
 * `POST /public/v1/submit/reject_activity`
 */
const rejectActivity = (input) => request({
    uri: "/public/v1/submit/reject_activity",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link RejectActivity}
 */
const signRejectActivity = (input, options) => signedRequest({
    uri: "/public/v1/submit/reject_activity",
    body: input.body,
    options,
});
/**
 * Remove Organization Feature
 *
 * Removes an organization feature
 *
 * `POST /public/v1/submit/remove_organization_feature`
 */
const removeOrganizationFeature = (input) => request({
    uri: "/public/v1/submit/remove_organization_feature",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link RemoveOrganizationFeature}
 */
const signRemoveOrganizationFeature = (input, options) => signedRequest({
    uri: "/public/v1/submit/remove_organization_feature",
    body: input.body,
    options,
});
/**
 * Set Organization Feature
 *
 * Sets an organization feature
 *
 * `POST /public/v1/submit/set_organization_feature`
 */
const setOrganizationFeature = (input) => request({
    uri: "/public/v1/submit/set_organization_feature",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link SetOrganizationFeature}
 */
const signSetOrganizationFeature = (input, options) => signedRequest({
    uri: "/public/v1/submit/set_organization_feature",
    body: input.body,
    options,
});
/**
 * Sign Raw Payload
 *
 * Sign a raw payload
 *
 * `POST /public/v1/submit/sign_raw_payload`
 */
const signRawPayload = (input) => request({
    uri: "/public/v1/submit/sign_raw_payload",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayload}
 */
const signSignRawPayload = (input, options) => signedRequest({
    uri: "/public/v1/submit/sign_raw_payload",
    body: input.body,
    options,
});
/**
 * Sign Transaction
 *
 * Sign a transaction
 *
 * `POST /public/v1/submit/sign_transaction`
 */
const signTransaction = (input) => request({
    uri: "/public/v1/submit/sign_transaction",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignTransaction}
 */
const signSignTransaction = (input, options) => signedRequest({
    uri: "/public/v1/submit/sign_transaction",
    body: input.body,
    options,
});
/**
 * Update Policy
 *
 * Update an existing Policy
 *
 * `POST /public/v1/submit/update_policy`
 */
const updatePolicy = (input) => request({
    uri: "/public/v1/submit/update_policy",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePolicy}
 */
const signUpdatePolicy = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_policy",
    body: input.body,
    options,
});
/**
 * Update Private Key Tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_private_key_tag`
 */
const updatePrivateKeyTag = (input) => request({
    uri: "/public/v1/submit/update_private_key_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePrivateKeyTag}
 */
const signUpdatePrivateKeyTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_private_key_tag",
    body: input.body,
    options,
});
/**
 * Update Root Quorum
 *
 * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/update_root_quorum`
 */
const updateRootQuorum = (input) => request({
    uri: "/public/v1/submit/update_root_quorum",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateRootQuorum}
 */
const signUpdateRootQuorum = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_root_quorum",
    body: input.body,
    options,
});
/**
 * Update User
 *
 * Update a User in an existing Organization
 *
 * `POST /public/v1/submit/update_user`
 */
const updateUser = (input) => request({
    uri: "/public/v1/submit/update_user",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUser}
 */
const signUpdateUser = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_user",
    body: input.body,
    options,
});
/**
 * Update User Tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_user_tag`
 */
const updateUserTag = (input) => request({
    uri: "/public/v1/submit/update_user_tag",
    method: "POST",
    body: input.body,
});
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserTag}
 */
const signUpdateUserTag = (input, options) => signedRequest({
    uri: "/public/v1/submit/update_user_tag",
    body: input.body,
    options,
});
/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
const nOOPCodegenAnchor = () => request({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
    method: "POST",
});
/**
 * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.
 *
 * See {@link NOOPCodegenAnchor}
 */
const signNOOPCodegenAnchor = () => signedRequest({
    uri: "/tkhq/api/v1/noop-codegen-anchor",
});

export { approveActivity, createApiKeys, createApiOnlyUsers, createAuthenticators, createInvitations, createPolicy, createPrivateKeyTag, createPrivateKeys, createSubOrganization, createUserTag, createUsers, createWallet, createWalletAccounts, deleteApiKeys, deleteAuthenticators, deleteInvitation, deletePolicy, emailAuth, exportPrivateKey, exportWallet, exportWalletAccount, getActivities, getActivity, getApiKey, getApiKeys, getAuthenticator, getAuthenticators, getOrganization, getPolicies, getPolicy, getPrivateKey, getPrivateKeys, getUser, getUsers, getWallet, getWalletAccounts, getWallets, getWhoami, initUserEmailRecovery, listPrivateKeyTags, listUserTags, nOOPCodegenAnchor, recoverUser, rejectActivity, removeOrganizationFeature, setOrganizationFeature, signApproveActivity, signCreateApiKeys, signCreateApiOnlyUsers, signCreateAuthenticators, signCreateInvitations, signCreatePolicy, signCreatePrivateKeyTag, signCreatePrivateKeys, signCreateSubOrganization, signCreateUserTag, signCreateUsers, signCreateWallet, signCreateWalletAccounts, signDeleteApiKeys, signDeleteAuthenticators, signDeleteInvitation, signDeletePolicy, signEmailAuth, signExportPrivateKey, signExportWallet, signExportWalletAccount, signGetActivities, signGetActivity, signGetApiKey, signGetApiKeys, signGetAuthenticator, signGetAuthenticators, signGetOrganization, signGetPolicies, signGetPolicy, signGetPrivateKey, signGetPrivateKeys, signGetUser, signGetUsers, signGetWallet, signGetWalletAccounts, signGetWallets, signGetWhoami, signInitUserEmailRecovery, signListPrivateKeyTags, signListUserTags, signNOOPCodegenAnchor, signRawPayload, signRecoverUser, signRejectActivity, signRemoveOrganizationFeature, signSetOrganizationFeature, signSignRawPayload, signSignTransaction, signTransaction, signUpdatePolicy, signUpdatePrivateKeyTag, signUpdateRootQuorum, signUpdateUser, signUpdateUserTag, updatePolicy, updatePrivateKeyTag, updateRootQuorum, updateUser, updateUserTag };
//# sourceMappingURL=public_api.fetcher.mjs.map

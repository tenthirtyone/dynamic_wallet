import { type Transaction, type VersionedTransaction } from "@solana/web3.js";
import { TurnkeyClient } from "@turnkey/http";
export declare class TurnkeySigner {
    readonly organizationId: string;
    readonly client: TurnkeyClient;
    constructor(input: {
        organizationId: string;
        client: TurnkeyClient;
    });
    /**
     * This function takes a Solana transaction and adds a signature with Turnkey
     *
     * @param tx Transaction | VersionedTransaction object (native @solana/web3.js type)
     * @param fromAddress Solana address (base58 encoded)
     */
    addSignature(tx: Transaction | VersionedTransaction, fromAddress: string): Promise<void>;
    /**
     * This function takes a message and returns it after being signed with Turnkey
     *
     * @param message The message to sign (Uint8Array)
     * @param fromAddress Solana address (base58 encoded)
     */
    signMessage(message: Uint8Array, fromAddress: string): Promise<Uint8Array>;
    private signRawPayload;
}
//# sourceMappingURL=index.d.ts.map
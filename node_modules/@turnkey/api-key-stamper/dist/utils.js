'use strict';

var elliptic_curves = require('./tink/elliptic_curves.js');
var encoding = require('@turnkey/encoding');

function convertTurnkeyApiKeyToJwk(input) {
    const { uncompressedPrivateKeyHex, compressedPublicKeyHex } = input;
    const jwk = elliptic_curves.pointDecode(hexStringToUint8Array(compressedPublicKeyHex));
    jwk.d = hexStringToBase64urlString(uncompressedPrivateKeyHex);
    return jwk;
}
function hexStringToUint8Array(input) {
    if (input.length === 0 ||
        input.length % 2 !== 0 ||
        /[^a-fA-F0-9]/u.test(input)) {
        throw new Error(`Invalid hex string: ${JSON.stringify(input)}`);
    }
    return Uint8Array.from(input
        .match(/.{2}/g // Split string by every two characters
    )
        .map((byte) => parseInt(byte, 16)));
}
function hexStringToBase64urlString(input) {
    const buffer = hexStringToUint8Array(input);
    return encoding.stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), ""));
}

exports.convertTurnkeyApiKeyToJwk = convertTurnkeyApiKeyToJwk;
//# sourceMappingURL=utils.js.map
